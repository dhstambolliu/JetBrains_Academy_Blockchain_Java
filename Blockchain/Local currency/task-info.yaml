type: edu
custom_name: stage6
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    public class Block {
        private int id;
        private long timestamp;
        private String parentBlockHash;
        private String hash;
        private Block next;
        private int magicNumber;
        private long generationTimeInSec;
        private int createdBy;
        private int zerosStatus;
        private List<Message> messages = new ArrayList<>();
        private long maxMessageId;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(long timestamp) {
            this.timestamp = timestamp;
        }

        public String getParentBlockHash() {
            return parentBlockHash;
        }

        public void setParentBlockHash(String parentBlockHash) {
            this.parentBlockHash = parentBlockHash;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }

        public Block getNext() {
            return next;
        }

        public void setNext(Block next) {
            this.next = next;
        }

        public int getMagicNumber() {
            return magicNumber;
        }

        public void setMagicNumber(int magicNumber) {
            this.magicNumber = magicNumber;
        }

        public long getGenerationTimeInSec() {
            return generationTimeInSec;
        }

        public void setGenerationTimeInSec(long generationTimeInSec) {
            this.generationTimeInSec = generationTimeInSec;
        }

        public int getCreatedBy() {
            return createdBy;
        }

        public void setCreatedBy(int createdBy) {
            this.createdBy = createdBy;
        }

        public int getZerosStatus() {
            return zerosStatus;
        }

        public void setZerosStatus(int zerosStatus) {
            this.zerosStatus = zerosStatus;
        }

        public List<Message> getMessages() {
            return messages;
        }

        public void setMessages(List<Message> messages) {
            this.messages = messages;
        }

        public long getMaxMessageId() {
            return maxMessageId;
        }

        public void setMaxMessageId(long maxMessageId) {
            this.maxMessageId = maxMessageId;
        }

        @Override
        public String toString() {
            String zerosStatusString;
            if (zerosStatus < 0) {
                zerosStatusString = "N was decreased by 1";
            } else if (zerosStatus == 0) {
                zerosStatusString = "N stays the same";
            } else {
                zerosStatusString = "N was increased to " + zerosStatus;
            }

            String blockData;
            if (messages.isEmpty()) {
                blockData = " no messages";
            } else {
                blockData = "\n" + messages.stream().map(Message::getText).collect(Collectors.joining("\n"));
            }

            return "\n" +
                    "Block:" + '\n' +
                    "Created by miner # " + createdBy + '\n' +
                    "Id: " + id + '\n' +
                    "Timestamp: " + timestamp + '\n' +
                    "Magic number: " + magicNumber + '\n' +
                    "Hash of the previous block:\n" + parentBlockHash + '\n' +
                    "Hash of the block:\n" + hash + '\n' +
                    "Block data:" + blockData + '\n' +
                    "Block was generating for " + generationTimeInSec + " seconds" + '\n' +
                    zerosStatusString +
                    "";
        }
    }
  learner_created: true
- name: src/blockchain/Main.java
  visible: true
  text: "package blockchain;\n\npublic class BlockchainStage5App {\n\n    public static\
    \ void main(String[] args) {\n        Blockchain blockchain = new Blockchain();\n\
    \        Chat chat = new Chat(blockchain);\n        new Thread(chat).start();\n\
    \n        for (int i = 0; i < 5; i++) {\n            blockchain.addBlock();\n\
    \            blockchain.validate();\n        }\n\n        Block block = blockchain.getFirst();\n\
    \        for (int i = 0; i < 5; i++) {\n//\t\t\tSystem.out.println(block);\n \
    \           block = block.getNext();\n        }\n\n        chat.shutdown();\n\
    \        blockchain.shutdown();\n    }\n}\n"
  learner_created: true
- name: src/blockchain/MessageCrypt.java
  visible: true
  text: |
    package blockchain;

    class HashInfo {
        private int minerId;
        private String hash;
        private int magicNumber;

        public HashInfo(int minerId, String hash, int magicNumber) {
            this.minerId = minerId;
            this.hash = hash;
            this.magicNumber = magicNumber;
        }

        public int getMinerId() {
            return minerId;
        }

        public String getHash() {
            return hash;
        }

        public int getMagicNumber() {
            return magicNumber;
        }
    }
  learner_created: true
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;


    import java.security.MessageDigest;
    import java.util.Random;
    import java.util.concurrent.Callable;

    class Miner implements Callable<HashInfo> {
        private int id;
        private int blockId;
        private int zeros;

        public Miner(int id, int blockId, int zeros) {
            this.id = id;
            this.blockId = blockId;
            this.zeros = zeros;
        }

        @Override
        public HashInfo call() {
            String base = String.valueOf(blockId);

            StringBuilder patternBuilder = new StringBuilder();
            for (int i = 0; i < zeros; i++) {
                patternBuilder.append("0");
            }
            String pattern = patternBuilder.toString();

            Random random = new Random();
            int magicNumber;
            String hash;
            do {
                magicNumber = random.nextInt(Integer.MAX_VALUE);
                hash = applySha256(base + magicNumber);
            } while (!(hash.substring(0, zeros).equals(pattern))
                    && !(Thread.interrupted()));

            return new HashInfo(id, hash, magicNumber);
        }

        /* Applies Sha256 to a string and returns a hash. */
        private static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: block.dat
  visible: true
  learner_created: true
- name: src/blockchain/BlockChainGenerator.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockChainUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.InvalidKeyException;
    import java.security.KeyPair;
    import java.security.KeyPairGenerator;
    import java.security.NoSuchAlgorithmException;
    import java.security.PrivateKey;
    import java.security.PublicKey;
    import java.security.Signature;
    import java.security.SignatureException;
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;
    import java.util.Objects;
    import java.util.concurrent.CopyOnWriteArrayList;
    import java.util.concurrent.ExecutionException;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.Future;
    import java.util.concurrent.atomic.AtomicLong;

    public class Blockchain {
        private Block first;
        private Block last;
        private int zeros;
        private List<Message> messages = new CopyOnWriteArrayList<>();
        private AtomicLong counter = new AtomicLong(1L);
        private PrivateKey privateKey;
        private PublicKey publicKey;
        private ExecutorService executor;

        public Blockchain() {
            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
            try {
                KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
                keyGen.initialize(512);
                KeyPair keyPair = keyGen.generateKeyPair();
                privateKey = keyPair.getPrivate();
                publicKey = keyPair.getPublic();
            } catch (NoSuchAlgorithmException e) {
                // empty
            }
        }

        public Block getFirst() {
            return first;
        }

        public void addBlock() {
            boolean isNotFirst = last != null;

            Block block = new Block();

            int id = isNotFirst ? last.getId() + 1 : 1;
            block.setId(id);

            if (isNotFirst) {
                synchronized (this) {
                    block.getMessages().addAll(messages);
                    messages.clear();
                }
            }

            long messageId = isNotFirst
                    ? block.getMessages().stream().mapToLong(Message::getId).max().orElse(last.getMaxMessageId())
                    : 0L;
            block.setMaxMessageId(messageId);

            hash(block);

            block.setTimestamp(new Date().getTime());

            String parentBlockHash = isNotFirst ? last.getHash() : "0";
            block.setParentBlockHash(parentBlockHash);

            if (blockValid(block)) {
                adjustZeros(block);
                chain(block);
            }

            System.out.println(block);
        }

        public void addMessage(String text) {
            Message message = new Message();
            message.setId(counter.getAndIncrement());
            message.setText(text);
            message.setPublicKey(publicKey);
            sign(message);
            messages.add(message);
        }

        private void sign(Message message) {
            try {
                Signature rsa = Signature.getInstance("SHA1withRSA");
                rsa.initSign(privateKey);
                String subjectToSign = message.getId() + message.getText();
                rsa.update(subjectToSign.getBytes());
                message.setSignature(rsa.sign());
            } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {
                e.printStackTrace();
            }
        }

        private void adjustZeros(Block block) {
            long generationTimeInSec = block.getGenerationTimeInSec();
            if (generationTimeInSec < 1) {
                zeros++;
                block.setZerosStatus(zeros);
            } else if (generationTimeInSec < 5) {
                block.setZerosStatus(0);
            } else {
                zeros--;
                block.setZerosStatus(-1);
            }
        }

        private void chain(Block block) {
            if (last != null) {
                last.setNext(block);
            } else {
                first = block;
            }

            last = block;
        }

        private boolean blockValid(Block block) {
            StringBuilder patternBuilder = new StringBuilder();
            for (int i = 0; i < zeros; i++) {
                patternBuilder.append("0");
            }
            String pattern = patternBuilder.toString();
            return block.getHash().substring(0, zeros).equals(pattern);
        }

        public void validate() {
            if (first == null) {
                return;
            }

            Block block = first.getNext();
            if (block == null) {
                return;
            }

            long maxId = 0L;
            while (block.getNext() != null) {
                if (!(Objects.equals(block.getHash(), block.getNext().getParentBlockHash()))) {
                    throw new RuntimeException(block.toString());
                }

                validateMessageSignature(block);

                validateMessageId(block, maxId);

                maxId = block.getMaxMessageId();
                block = block.getNext();
            }
        }

        private void validateMessageSignature(Block block) {
            List<Message> messages = block.getMessages();

            try {
                Signature signature = Signature.getInstance("SHA1withRSA");
                boolean isVerified = messages.stream()
                        .peek(m -> {
                            try {
                                signature.initVerify(m.getPublicKey());
                            } catch (InvalidKeyException e) {
                                // empty
                            }
                        })
                        .peek(m -> {
                            try {
                                signature.update((m.getId() + m.getText()).getBytes());
                            } catch (SignatureException e) {
                                // empty
                            }
                        })
                        .map(m -> {
                            try {
                                return signature.verify(m.getSignature());
                            } catch (SignatureException e) {
                                // empty
                            }
                            return true;
                        })
                        .reduce(true, (acc, elem) -> acc && elem);
                if (!isVerified) {
                    throw new RuntimeException(block.toString());
                }
            } catch (NoSuchAlgorithmException e) {
                // empty
            }
        }

        private void validateMessageId(Block block, long maxId) {
            long wrongId = block.getMessages().stream()
                    .mapToLong(Message::getId)
                    .filter(id -> id <= maxId)
                    .count();
            boolean isVerified = wrongId == 0L;
            if (!isVerified) {
                throw new RuntimeException(block.toString());
            }
        }

        private void hash(Block block) {
            List<Future<HashInfo>> futures = new ArrayList<>(10);

            long startTime = System.currentTimeMillis();
            for (int i = 1; i < 10; i++) {
                futures.add(executor.submit(new Miner(i, block.getId(), zeros)));
            }

            boolean isDone = false;
            do {
                for (Future<HashInfo> future : futures) {
                    if (future.isDone()) {
                        try {
                            HashInfo hashInfo = future.get();
                            block.setHash(hashInfo.getHash());
                            block.setMagicNumber(hashInfo.getMagicNumber());
                            block.setCreatedBy(hashInfo.getMinerId());
                            isDone = true;
                            break;
                        } catch (InterruptedException | ExecutionException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } while (!(isDone));

            long endTime = System.currentTimeMillis();
            block.setGenerationTimeInSec((endTime - startTime) / 1000);

            for (Future<HashInfo> future : futures) {
                future.cancel(true);
            }
        }

        public void shutdown() {
            executor.shutdownNow();
        }
    }
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/SerialiseUtil.java
  visible: true
  text: |
    package blockchain;


    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class Chat implements Runnable {
        private Blockchain blockchain;
        private ExecutorService executor;
        private List<String> messages = new ArrayList<>();
        private Random random = new Random();
        private volatile boolean running = true;

        {
            messages.add("Hi! I'm here.");
            messages.add("What's up?!");
            messages.add("It's not fair!");
            messages.add("Anyway, thank you for this amazing chat.");
            messages.add("You're welcome :)");
            messages.add("Hey, nice chat!!");
        }

        public Chat(Blockchain blockchain) {
            this.blockchain = blockchain;
            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
        }

        @Override
        public void run() {
            blockchain.addMessage("Tom: " + "I'm first!");
            while (running) {
                executor.submit(() -> sendMsg("Sarah"));
                executor.submit(() -> sendMsg("Nick"));
                executor.submit(() -> sendMsg("Tom"));
            }
            executor.shutdownNow();
        }

        private void sendMsg(String name) {
            try {
                blockchain.addMessage(name + ": " + getRandomMsg());
                Thread.sleep(random.nextInt(1000));
            } catch (InterruptedException e) {
                // empty
            }
        }

        private String getRandomMsg() {
            int size = messages.size();
            return messages.get(random.nextInt(size));
        }

        public void shutdown() {
            running = false;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5418#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 05 Mar 2022 17:53:45 UTC
record: -1
