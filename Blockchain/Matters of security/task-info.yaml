type: edu
custom_name: stage5
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/controller/MinerController.java
  visible: true
  text: |-
    package blockchain.controller;

    import blockchain.model.client.Miner;
    import blockchain.service.MinerService;

    import java.util.Optional;

    public final class MinerController extends Controller<Miner, Long> {
        private static MinerController instance;

        private MinerController() {
            super(MinerService.getInstance());
        }

        public static MinerController getInstance() {
            if (Optional.ofNullable(instance).isEmpty()) {
                synchronized (MinerController.class) {
                    if (Optional.ofNullable(instance).isEmpty()) {
                        instance = new MinerController();
                    }
                }
            }

            return instance;
        }

        @Override
        public void submit(Long number, Miner miner) {
            service.submit(number, miner);
        }
    }
  learner_created: true
- name: src/blockchain/model/client/Client.java
  visible: true
  text: |
    package blockchain.model.client;


    import blockchain.Submittable;

    import java.io.Serializable;
    import java.util.Random;

    public abstract class Client<T extends Client<?, ?>, S> implements Runnable, Serializable {
        protected final long id;
        protected transient final Submittable<T, S> controller;
        protected transient final Random numberGenerator;

        public Client(long id, Submittable<T, S> controller) {
            this.id = id;
            this.controller = controller;
            numberGenerator = new Random();
        }

        public long getId() {
            return id;
        }
    }
  learner_created: true
- name: src/blockchain/controller/Controller.java
  visible: true
  text: |-
    package blockchain.controller;

    import blockchain.Submittable;
    import blockchain.model.client.Client;
    import blockchain.service.Service;

    public abstract class Controller<T extends Client<?, ?>, S> implements Submittable<T, S> {
        protected final Service<T, S> service;

        public Controller(Service<T, S> service) {
            this.service = service;
        }
    }
  learner_created: true
- name: src/blockchain/model/client/Miner.java
  visible: true
  text: |-
    package blockchain.model.client;

    import blockchain.controller.MinerController;

    public final class Miner extends Client<Miner, Long> {

        public Miner(int id) {
            super(id, MinerController.getInstance());
        }

        @Override
        public void run() {
            do {
                controller.submit(numberGenerator.nextLong(), this);
            } while (!Thread.interrupted());
        }
    }
  learner_created: true
- name: src/blockchain/model/Block.java
  visible: true
  text: |
    package blockchain.model;

    import blockchain.model.client.Miner;
    import blockchain.util.StringUtil;

    import java.io.Serializable;
    import java.util.ArrayDeque;
    import java.util.Deque;
    import java.util.Optional;

    public class Block implements Serializable {
        private static final long serialVersionUID = 1L;
        private final long id;
        private final String prevHash;
        private final long timestamp;
        private Deque<String> data;
        private Block.ProofOfWork proofOfWork;

        private Block(long id, String prevHash, long timestamp) {
            this.id = id;
            this.prevHash = prevHash;
            this.timestamp = timestamp;
            data = new ArrayDeque<>();
        }

        public static Block newInstance(long id, String prevHash, long timestamp) {
            return new Block(id, prevHash, timestamp);
        }

        public long getId() {
            return id;
        }

        public String getPrevHash() {
            return prevHash;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public void setData(Deque<String> data) {
            this.data = new ArrayDeque<>(data);
        }

        public void setProofOfWork(ProofOfWork proofOfWork) {
            this.proofOfWork = proofOfWork;
        }

        public String hash() {
            return hash(proofOfWork.magicNumber);
        }

        public String hash(long number) {
            return StringUtil.applySha256(getId() + getPrevHash() + getTimestamp() + number);
        }

        private String dataToString() {
            return data.isEmpty() ? "no messages" : "\n" + String.join("\n", data);
        }

        @Override
        public String toString() {
            return Optional.ofNullable(proofOfWork).map(
                            pow -> String.format("Block:%n" +
                                            "Created by miner # %d%n" +
                                            "Id: %d%n" +
                                            "Timestamp: %d%n" +
                                            "Magic number: %d%n" +
                                            "Hash of the previous block: %n" +
                                            "%s%n" +
                                            "Hash of the block: %n" +
                                            "%s%n" +
                                            "Block data: %s%n" +
                                            "Block was generating for %d seconds%n" +
                                            "%s%n",
                                    pow.miner.getId(), getId(), getTimestamp(), pow.magicNumber,
                                    getPrevHash(), hash(), dataToString(), pow.duration, pow.response))
                    .orElse(String.format("Block:%n" +
                                    "Id: %d%n" +
                                    "Timestamp: %d%n" +
                                    "Hash of the previous block: %n" +
                                    "%s%n" +
                                    "Block data: %s%n",
                            getId(), getTimestamp(), getPrevHash(), dataToString()));
        }

        public static class ProofOfWork implements Serializable {
            private final Miner miner;
            private final long magicNumber;
            private final long duration;
            private final String response;

            public ProofOfWork(long magicNumber, long duration, String response, Miner miner) {
                this.magicNumber = magicNumber;
                this.duration = duration;
                this.response = response;
                this.miner = miner;
            }

        }
    }
  learner_created: true
- name: src/blockchain/controller/UserController.java
  visible: true
  text: |-
    package blockchain.controller;

    import blockchain.model.client.User;
    import blockchain.service.UserService;

    import java.util.Optional;

    public final class UserController extends Controller<User, String> {
        private static UserController instance;

        private UserController() {
            super(UserService.getInstance());
        }

        public static UserController getInstance() {
            if (Optional.ofNullable(instance).isEmpty()) {
                synchronized (UserController.class) {
                    if (Optional.ofNullable(instance).isEmpty()) {
                        instance = new UserController();
                    }
                }
            }

            return instance;
        }

        @Override
        public void submit(String message, User user) {
            service.submit(message, user);
        }
    }
  learner_created: true
- name: src/blockchain/service/UserService.java
  visible: true
  text: |-
    package blockchain.service;

    import blockchain.model.client.User;
    import blockchain.repository.Blockchain;

    import java.util.Optional;

    public final class UserService extends Service<User, String> {
        private static UserService instance;

        public static UserService getInstance() {
            if (Optional.ofNullable(instance).isEmpty()) {
                synchronized (UserService.class) {
                    if (Optional.ofNullable(instance).isEmpty()) {
                        instance = new UserService();
                    }
                }
            }

            return instance;
        }

        @Override
        public void submit(String message, User user) {
            synchronized (Blockchain.class) {
                repo.postMessage(message, user);
            }
        }
    }
  learner_created: true
- name: src/blockchain/repository/StateManager.java
  visible: true
  text: |-
    package blockchain.repository;

    import blockchain.util.SerializationUtil;

    import java.io.IOException;
    import java.util.ArrayDeque;
    import java.util.Deque;

    public class StateManager {
        private final String filename;
        private final Blockchain blockchain;
        private final Deque<Blockchain.State> history;

        public StateManager(String filename) {
            this.filename = filename;
            history = new ArrayDeque<>();
            blockchain = Blockchain.getInstance();
            loadStateFromFile();
        }

        public void save() {
            history.push(blockchain.getState());
            saveStateToFile();
        }

        public void undo() {
            if (!history.isEmpty()) {
                blockchain.setState(history.pop());
            }
        }

        private void loadStateFromFile() {
            Blockchain.State state = blockchain.getState();

            try {
                Blockchain.State loadedState = (Blockchain.State) SerializationUtil.deserialize(filename);

                if (loadedState.isValidState()) {
                    state = loadedState;
                }
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("No valid blockchain found: new blockchain created.\n");
            }

            history.push(state);
            blockchain.setState(state);
        }

        private void saveStateToFile() {
            try {
                SerializationUtil.serialize(blockchain.getState(), filename);
            } catch (IOException e) {
                System.out.println("Unable to save current state: reverted to previous state.\n");
                undo();
            }
        }
    }
  learner_created: true
- name: src/blockchain/util/StringUtil.java
  visible: true
  text: |
    package blockchain.util;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class StringUtil {

        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");

                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();

                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }

                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/service/MinerService.java
  visible: true
  text: |-
    package blockchain.service;

    import blockchain.model.client.Miner;
    import blockchain.repository.Blockchain;

    import java.util.Optional;

    public final class MinerService extends Service<Miner, Long> {
        private static MinerService instance;

        public static MinerService getInstance() {
            if (Optional.ofNullable(instance).isEmpty()) {
                synchronized (MinerService.class) {
                    if (Optional.ofNullable(instance).isEmpty()) {
                        instance = new MinerService();
                    }
                }
            }

            return instance;
        }

        public void submit(Long number, Miner miner) {
            if (repo.getCurrentBlock().hash(number).startsWith(repo.prefix())) {
                synchronized (Blockchain.class) {
                    if (repo.getCurrentBlock().hash(number).startsWith(repo.prefix())) {
                        repo.createBlock(number, miner);
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/blockchain/repository/Blockchain.java
  visible: true
  text: |-
    package blockchain.repository;

    import blockchain.model.Block;
    import blockchain.model.client.Miner;
    import blockchain.model.client.User;

    import java.io.Serializable;
    import java.util.ArrayDeque;
    import java.util.Date;
    import java.util.Deque;
    import java.util.Optional;
    import java.util.stream.Collectors;

    public class Blockchain {
        private static final String INITIAL_HASH = "0";
        private static final long INITIAL_ID = 1L;
        private static Blockchain instance;
        private static StateManager stateManager;

        private Deque<Block> blocks;
        private Block currentBlock;
        private Deque<String> messageBuffer;
        private int n;

        private Blockchain() {
            blocks = new ArrayDeque<>();
            currentBlock = generateBlock();
            messageBuffer = new ArrayDeque<>();
        }

        public static Blockchain getInstance() {
            if (Optional.ofNullable(instance).isEmpty()) {
                synchronized (Blockchain.class) {
                    if (Optional.ofNullable(instance).isEmpty()) {
                        instance = new Blockchain();
                        stateManager = new StateManager("blockchain.sav");
                    }
                }
            }

            return instance;
        }

        public int size() {
            return blocks.size();
        }

        private Block generateBlock() {
            return Optional.ofNullable(blocks.peekLast())
                    .map(lastBlock -> Block.newInstance(blocks.size() + 1L, lastBlock.hash(), new Date().getTime()))
                    .orElse(Block.newInstance(INITIAL_ID, INITIAL_HASH, new Date().getTime()));
        }

        public void createBlock(long number, Miner miner) {
            long duration = (new Date().getTime() - currentBlock.getTimestamp()) / 1000;
            Block.ProofOfWork proofOfWork = new Block.ProofOfWork(number, duration, updateN(duration), miner);
            currentBlock.setProofOfWork(proofOfWork);

            if (blocks.offerLast(currentBlock)) {
                currentBlock = generateBlock();
                currentBlock.setData(messageBuffer);
                messageBuffer.clear();
                stateManager.save();
            }
        }

        public Block getCurrentBlock() {
            return currentBlock;
        }

        public String prefix() {
            return INITIAL_HASH.repeat(n);
        }

        private String updateN(long duration) {
            return duration < 10 ? "N was increased to " + ++n
                    : duration > 60 && n > 0 ? "N was decreased to " + --n
                    : "N stays the same";
        }

        public synchronized void postMessage(String message, User user) {
            messageBuffer.push(user.getName() + ": " + message);
        }

        public String toStringLast(int n) {
            return getState().isValidState() ? blocks.stream()
                    .skip(Math.max(0, blocks.size() - n))
                    .map(Block::toString)
                    .collect(Collectors.joining("\n")) : "Invalid Blockchain.";
        }

        @Override
        public String toString() {
            return toStringLast(blocks.size());
        }

        public State getState() {
            return new State(blocks, messageBuffer);
        }

        public void setState(State state) {
            blocks = state.blocks;
            messageBuffer = state.messageBuffer;
            currentBlock = generateBlock();
        }

        static class State implements Serializable {
            private static final long serialVersionUID = 1L;
            private final Deque<Block> blocks;
            private final Deque<String> messageBuffer;

            public State(Deque<Block> blocks, Deque<String> messageBuffer) {
                this.blocks = new ArrayDeque<>(blocks);
                this.messageBuffer = new ArrayDeque<>(messageBuffer);
            }

            public boolean isValidState() {
                String prevHash = INITIAL_HASH;

                for (Block block : blocks) {
                    if (!block.getPrevHash().equals(prevHash)) {
                        return false;
                    }

                    prevHash = block.hash();
                }

                return true;
            }
        }
    }
  learner_created: true
- name: src/blockchain/model/client/User.java
  visible: true
  text: |-
    package blockchain.model.client;

    import blockchain.controller.UserController;

    import java.util.List;
    import java.util.concurrent.TimeUnit;

    public final class User extends Client<User, String> {
        private final String name;

        public User(long id, String name) {
            super(id, UserController.getInstance());
            this.name = name;
        }

        public String getName() {
            return name;
        }

        @Override
        public void run() {
            do {
                controller.submit(chat(), this);

                try {
                    TimeUnit.MILLISECONDS.sleep(numberGenerator.nextInt(50));
                } catch (InterruptedException e) {
                    return;
                }
            } while (!Thread.interrupted());
        }

        private String chat() {
            List<String> messages = List.of(
                    "Hello", "How are you?", "How bout' those Dolphins?", "Life is good", "I love Java",
                    "I love basketball", "It's sunny outside here", "It's raining here", "What is the meaning of life?",
                    "I am getting old!", "Will I ever make decent money?", "I hate mowing my lawn!",
                    "Interesting...", "This chat is garbage"
            );

            return messages.get(numberGenerator.nextInt(messages.size()));
        }
    }
  learner_created: true
- name: src/blockchain/util/SerializationUtil.java
  visible: true
  text: |-
    package blockchain.util;

    import java.io.*;

    public class SerializationUtil {

        public static void serialize(Object obj, String fileName) throws IOException {
            try (ObjectOutputStream oos =
                         new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))) {
                oos.writeObject(obj);
            }
        }

        public static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            try (ObjectInputStream ois =
                         new ObjectInputStream(new BufferedInputStream(new FileInputStream(fileName)))) {
                return ois.readObject();
            }
        }
    }
  learner_created: true
- name: src/blockchain/service/Service.java
  visible: true
  text: |-
    package blockchain.service;

    import blockchain.Submittable;
    import blockchain.model.client.Client;
    import blockchain.repository.Blockchain;

    public abstract class Service<T extends Client<?, ?>, S> implements Submittable<T, S> {
        protected final Blockchain repo;

        public Service() {
            this.repo = Blockchain.getInstance();
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  text: |-
    package blockchain;

    import blockchain.model.client.Client;

    public interface Submittable<T extends Client<?, ?>, S> {

        void submit(S s, T client);
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockchainStage5App.java
  visible: true
  learner_created: true
- name: src/blockchain/Chat.java
  visible: true
  learner_created: true
- name: src/blockchain/HashInfo.java
  visible: true
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5417#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 05 Mar 2022 17:39:55 UTC
record: 5
